import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask, request
import asyncio

# Flask-приложение для работы с вебхуком
app = Flask(__name__)

# Включение логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Функция обработки команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Привет! Я бот, готов к работе.")

# Функция обработки команды /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Список доступных команд:\n/start - начать\n/help - помощь")

# Инициализация бота
application = ApplicationBuilder().token("7766596531:AAEll9NJOEq2SuiPBaYxM_REfdeuX4D08qk").build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))

# Асинхронная установка вебхука
async def set_webhook():
    url = "https://123.45.67.89/webhook"
    await application.bot.set_webhook(url=url)
    logging.info(f"Webhook установлен на {url}")

# Flask-роут для обработки запросов от Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    application.update_queue.put_nowait(Update.de_json(data, application.bot))
    return "OK", 200

# Запуск приложения
if __name__ == "__main__":
    # Устанавливаем вебхук при запуске
    asyncio.run(set_webhook())

    # Запускаем Flask-сервер
    app.run(host='0.0.0.0', port=5000)
