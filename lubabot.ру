import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import signal

# Включение логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Функция обработки команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Привет! Я бот, готов к работе.")

# Функция обработки команды /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Список доступных команд:\n/start - начать\n/help - помощь")

# Инициализация бота
application = ApplicationBuilder().token("7766596531:AAEll9NJOEq2SuiPBaYxM_REfdeuX4D08qk").build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))

# Функция для корректного завершения
def shutdown():
    logging.info("Shutting down bot...")
    asyncio.get_event_loop().stop()

# Обработка сигналов для завершения
signal.signal(signal.SIGINT, lambda s, f: shutdown())
signal.signal(signal.SIGTERM, lambda s, f: shutdown())

# Основной блок запуска
if __name__ == "__main__":
    try:
        application.run_polling()
    except asyncio.CancelledError:
        logging.error("Polling loop was cancelled.")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        asyncio.get_event_loop().close()
